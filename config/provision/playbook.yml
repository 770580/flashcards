---
- hosts: all
  remote_user: ec2-user
  sudo: yes

  vars:
    # Версия ruby
    ruby_version: '2.3.0'
    # Пользователь, от лица которого будет происходит деплой
    user: 'deploy'
    # Домашняя директория
    home: '/home/{{ user }}'
    # Директория установки Rbenv
    rbenv_root: '{{ home }}/.rbenv'
    # Название приложения
    name: 'flashcards'
    # Путь до нашего приложения
    application: '{{ home }}/applications/{{ name }}'

#  roles:
#     - { role: rvm_io.rvm1-ruby, tags: ruby, sudo: True }

  tasks:
    - name: Install EPEL repo.
      yum:
        name: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm"
        state: present
      register: result
      until: '"failed" not in result'
      retries: 5
      delay: 10

    - name: Import EPEL GPG key.
      rpm_key:
        key: "/etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-{{ ansible_distribution_major_version }}"
        state: present

    - name: Install postgresql-9.4 repo.
      yum:
        name: "http://yum.postgresql.org/9.4/redhat/rhel-7-x86_64/pgdg-redhat94-9.4-1.noarch.rpm"
        state: present
      register: result
      until: '"failed" not in result'
      retries: 5
      delay: 10

    - name: install nodejs
      yum: name=nodejs state=latest

    - name: install git
      yum: name=git state=latest

    - name: install nginx
      yum: name=nginx state=latest

    - name: install postgresql94-server
      yum: name=postgresql94-server state=latest

    - name: install postgresql94-contrib
      yum: name=postgresql94-contrib state=latest

    - name: install bzip2
      yum: name=bzip2 state=latest

    - name: install gcc
      yum: name=gcc state=latest

    - name: install openssl-devel
      yum: name=openssl-devel state=latest

    - name: install readline-devel
      yum: name=readline-devel state=latest

    - name: install zlib-devel
      yum: name=zlib-devel state=latest

    - name: install ImageMagick
      yum: name=ImageMagick state=latest

    - name: install htop
      yum: name=htop state=latest

    - name: 'account | create'
      user: 'name={{ user }} shell=/bin/bash'

    # Устанавливаем ruby-build, rbenv, bundler (шаги взяты из инструкции к установке rbenv)
    - name: 'rbenv | clone repo'
      git: 'repo=git://github.com/sstephenson/rbenv.git dest={{ rbenv_root }} accept_hostkey=yes'

    - name: 'rbenv | check ruby-build installed'
      command: 'test -x {{ rbenv_root }}/plugins/ruby-build'
      # Мы проверяем, установлен ли ruby-build и регистрируем событие plugin_installed,
      # а затем выполняем все остальные шаги, которые не были изменены при следующем прогоне плейбука
      register: 'plugin_installed'
      ignore_errors: yes

    - name: 'rbenv | add bin to path'
      shell: echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> {{ home }}/.bashrc
      when: 'plugin_installed|failed'

    - name: 'rbenv | init'
      shell: echo 'eval "$(rbenv init -)"' >> {{ home }}/.bashrc
      when: 'plugin_installed|failed'

    - name: 'rbenv | clone ruby-build repo'
      git: 'repo=git://github.com/sstephenson/ruby-build.git dest={{ rbenv_root }}/plugins/ruby-build accept_hostkey=yes'
      when: 'plugin_installed|failed'

    - name: 'rbenv | check ruby {{ ruby_version }} installed'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv versions | grep {{ ruby_version }}'
      register: 'ruby_installed'
      ignore_errors: yes

    - name: 'rbenv | install ruby {{ ruby_version }}'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv install {{ ruby_version }}'
      when: 'ruby_installed|failed'

    - name: 'rbenv | set global ruby {{ ruby_version }}'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv global {{ ruby_version }}'
      when: 'ruby_installed|failed'

    - name: 'rbenv | rehash'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv rehash'
      when: 'ruby_installed|failed'

    - name: 'rbenv | create .gemrc'
      lineinfile: 'dest={{ home }}/.gemrc owner={{ user }} group={{ user }} mode=0644 line="gem: --no-ri --no-rdoc" create=yes'
      when: 'ruby_installed|failed'

    - name: 'ruby | install bundler'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv exec gem install bundler'
      when: 'ruby_installed|failed'

    - name: 'rbenv | change owner'
      shell: 'chown -R {{ user }}:{{ user }} {{ rbenv_root }}'
      when: 'ruby_installed|failed'

    - name: 'initializing postgresql'
      shell: '/usr/pgsql-9.4/bin/postgresql94-setup initdb'
      ignore_errors: yes

    - name: 'enable postgresql'
      service: name=postgresql-9.4 enabled=yes

    - name: 'start postgresql'
      service: name=postgresql-9.4 state=started

    # Устанавливаем posgresql, создаём пользователя, копируем конфиги и создаём конечную базу данных
    - name: 'postgresql | check user'
      shell: 'psql -U postgres -c "\copyright"'
      register: 'postgres_login'
      ignore_errors: yes

    - name: 'postgresql | set auth type'
      copy: 'src=configs/pg_hba.conf dest=/var/lib/pgsql/9.4/data/pg_hba.conf owner=postgres group=postgres mode=0644'
      when: 'postgres_login|failed'

    - name: 'postgresql | restart service'
      service: name=postgresql-9.4 state=restarted
      when: 'postgres_login|failed'

    - name: 'postgresql | create shared directory'
      shell: 'mkdir -p {{ application }}/shared/config -m 775 && chown -R {{ user }}:{{ user }} {{ home }}/applications'
      when: 'postgres_login|failed'

    - name: 'postgresql | copy database.yml'
    # Модуль template позволяет нам не просто копировать файл из А в Б, но и переменные, которые будут автоматически подставляться внутри конфигов
      template: 'src=configs/database.yml dest={{ application }}/shared/config/database.yml owner={{ user }} group={{ user }} mode=0644'
      when: 'postgres_login|failed'

    - name: 'postgresql | create database'
      shell: 'createdb -U postgres -O postgres -E UTF8 -l en_US.UTF-8 {{ name }}_production'
      when: 'postgres_login|failed'

    # Установка и настройка веб сервера nginx
    - name: 'nginx | check config'
      command: 'test -f /etc/nginx/sites-enabled/{{ name }}.conf'
      register: 'nginx_config_copied'
      ignore_errors: yes

#    - name: 'nginx | createdir'
#      shell: 'rm /etc/nginx/sites-enabled/default; mkdir -p etc/nginx/sites-enabled/'
#      when: 'nginx_config_copied|failed'

    - name: 'nginx | copy config'
      template: 'src=configs/nginx.conf dest=/etc/nginx/conf.d/{{ name }}.conf owner=root group=root mode=0644'
      when: 'nginx_config_copied|failed'

    - name: 'nginx | restart service'
      # Модуль service - это ещё одна удобная обёртка, указываем какой сервис и что с ним необходимо сделать
      service: name=nginx state=restarted
      when: 'nginx_config_copied|failed'